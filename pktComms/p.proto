package pktComms;

// Where a Hash field is present, it must be SHA3 (Keccak 256) and it must
// cover all of the other fields in the order shown.  Messages whose Hash
// fields do not match the other fields must be silently discarded (but 
// should be logged, at least during development).

// Opaque contents get copied through to the consensus layer
message AppMsg {
    optional uint64 MsgN        = 1;
    optional bytes  ID          = 2;
    optional bytes  Contents    = 3;
    optional bytes  Salt        = 12;
    optional bytes  Hash        = 13;
}

// First message sent; initiates a communications cycle.  The first MsgN
// must be 1.  ID is the nodeID of the sender, a 32-byte value.  sigPubKey
// is the sender's RSA sig public key; commsPubKey is the sender's RSA
// comms public key.
message Hello {
    optional uint64 MsgN		= 1;
    optional bytes  ID			= 2;
    optional bytes  SigPubKey	= 3;
    optional bytes  CommsPubKey	= 4;
    optional string TCPAddr		= 5;
    optional bytes  Salt		= 12;
    optional bytes  Hash		= 13;
}

// Ends a communications cycle.
message Bye {
    optional uint64 MsgN		= 1;
    optional bytes  ID			= 2;
    optional bytes  Salt		= 12;
    optional bytes  Hash		= 13;
}

// Sent at regular intervals.
message KeepAlive {
    optional uint64 MsgN		= 1;
    optional bytes  ID			= 2;
    optional bytes  Salt		= 12;
    optional bytes  Hash		= 13;
}

message Ack {
    optional uint64 MsgN		= 1;
    optional bytes  ID			= 2;
    optional uint64 YourMsgN	= 3;
    optional bytes  YourID		= 4;
    optional bytes  Salt		= 12;
    optional bytes  Hash		= 13;
}

message Error {
    optional uint64 MsgN		= 1;
    optional bytes  ID			= 2;
    optional uint64 YourMsgN	= 3;
    optional bytes  YourID		= 4;
    optional uint64 ErrCode     = 5;
    optional string ErrDesc     = 6;
    optional bytes  Salt		= 12;
    optional bytes  Hash		= 13;
}
